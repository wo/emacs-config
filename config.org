#+TITLE: Doom emacs config

I use [[https://github.com/hlissner/doom-emacs][doom emacs]] to write notes, articles, and code. This is my configuration.

* Basics

Speed up processing of this file:

#+begin_src emacs-lisp :tangle yes
;;; config.el -*- lexical-binding: t; -*-
#+end_src

Personal info:

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Wolfgang Schwarz"
      user-mail-address "wo@umsu.de")
#+end_src

Automatically find projects on startup:

#+begin_src emacs-lisp :tangle yes
(setq projectile-project-search-path '("~/words/" "~/notes/" "~/programming/"))
#+end_src


* User interface

** Theme and font

#+begin_src emacs-lisp :tangle yes
(setq
      doom-font (font-spec :family "monospace" :size 15)
      doom-theme 'doom-one
      doom-enable-brighter-comments 1
      +doom-dashboard-banner-file (expand-file-name "logo.png" doom-private-dir)
      )
#+end_src

Add a little padding to windows (currently doesn't seem to work):

#+begin_src emacs-lisp :tangle yes
(set-window-margins nil 1)
#+end_src

Increase line-spacing:

#+begin_src emacs-lisp :tangle yes
(setq-default line-spacing 0.2)
#+end_src

** Tweak org colours and symbols

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-ellipsis " ▾ "
        org-bullets-bullet-list '("·"))
  (set-face-attribute 'org-link nil :weight 'normal :background nil)
  (set-face-attribute 'org-code nil :foreground "#a9a1e1" :background nil)
  (set-face-attribute 'org-date nil :foreground "#5B6268" :background nil)
  (set-face-attribute 'org-level-1 nil :foreground "steelblue2" :background nil :height 1.0 :weight 'bold)
  (set-face-attribute 'org-level-2 nil :foreground "slategray2" :background nil :height 1.0 :weight 'bold)
  (set-face-attribute 'org-level-3 nil :foreground "SkyBlue2" :background nil :height 1.0 :weight 'normal)
  (set-face-attribute 'org-level-4 nil :foreground "DodgerBlue2" :background nil :height 1.0 :weight 'normal)
  (set-face-attribute 'org-level-5 nil :weight 'normal) (set-face-attribute 'org-level-6 nil :weight 'normal)
  (set-face-attribute 'org-document-title nil :foreground "SlateGray1" :background nil :height 1.75 :weight 'bold)
  )
#+end_src

** Line numbers

I'm going back and forth between relative line numbers and no line numbers.

#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type nil)
;(setq display-line-numbers-type 'relative)
#+end_src

** Show word count

#+begin_src emacs-lisp :tangle yes
(setq doom-modeline-enable-word-count t)
#+end_src

** Start fullscreen

#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Splitting and rotating windows

Prompt for buffer after splitting the window (from [[https://tecosaur.github.io/emacs-config/config.html#package-configuration][tecosaur]]):

#+begin_src emacs-lisp :tangle yes
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)
#+end_src

Close other windows with SPC w 1:

#+begin_src emacs-lisp :tangle yes
(map!
 :map evil-window-map
  :desc "close other windows"  "1" 'delete-other-windows
  )
#+end_src


* Snippets and auto-complete

Snippets are useful.

#+begin_src emacs-lisp :tangle yes
(setq yas-snippet-dirs '("~/.doom.d/snippets"))
#+end_src

Allow inserting in edit mode:

#+begin_src emacs-lisp :tangle yes
(map! :desc "insert snippet" "C-s" #'yas-insert-snippet)
#+end_src

I've started to play around with abbrev-mode as well.

#+begin_src emacs-lisp :tangle yes
(use-package abbrev
  :init
  (setq-default abbrev-mode t)
  :commands abbrev-mode
  :config
  (setq abbrev-file-name (expand-file-name "abbrev.el" doom-private-dir))
  (setq save-abbrevs 'silently)
  )
#+end_src

Configure the autocomplete popup:

#+begin_src emacs-lisp :tangle yes
(after! company
  (setq company-idle-delay 0.8
        company-minimum-prefix-length 1)
  (setq company-show-numbers t)
  ;; only autocomplete words, not numerals:
  (setq company-dabbrev-char-regexp "[A-z:-]")
  (add-hook 'evil-normal-state-entry-hook #'company-abort) ;; make aborting less annoying.
)
#+end_src

Enable autocomplete for yasnippets:

#+begin_src emacs-lisp :tangle yes
(after! anaconda-mode
  (set-company-backend! 'anaconda-mode '(company-anaconda company-yasnippet))
  )
#+end_src

company-math looks interesting, but I can't get it to work.

#+begin_src emacs-lisp :tangle no
;; (use-package! company-math
;;     :config
;;     ;(add-to-list 'company-backends 'company-math-symbols-latex)
;;     (add-to-list 'company-backends 'company-math-symbols-unicode)
;;     (setq company-math-allow-latex-symbols-in-faces t)
;;     (setq company-tooltip-align-annotations t))
#+end_src


* Org project management and agenda

I use separate org files for different projects (e.g. research, teaching,
supervision, software projects). Often these org files lie in dedicated project
directories, but they are all symlinked to my ~/org directory.

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org"))
  )
#+end_src

** Quick access to org files

I use SPC / to quickly access the project files. (This doesn't seem work if
~/org is a git repository because then symlinks are ignored.)

#+begin_src emacs-lisp :tangle yes
(map!
 :leader
 :desc "open ~/org file" "/"  '(lambda () (interactive) (counsel-find-file "~/org/"))
 )
#+end_src

** 'TODO' states

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "APPT(a)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces '(("APPT" . +org-todo-active)
                                 ("WAIT" . +org-todo-onhold)
                                 ("PROJ" . +org-todo-project)))
  )
#+end_src

** Priorities

I use A-C priorities to plan my workdays and weeks.

Unfortunately this means that if I'm not currently working on a project because
I'm busy with other things, no task in that project can have a priority greater
than D. So I use D-G priorities.

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-lowest-priority ?G)
  )
#+end_src

** Key bindings

I often insert inactive timestamps to document when an event/conversation took
place, and I don't want to enter normal mode and press SPC m d T each time.

#+begin_src emacs-lisp :tangle yes
(map! :after org
      :map org-mode-map
      "C-c ," nil
)
(map!
   :desc "insert inactive timestamp" "C-c ," #'org-time-stamp-inactive
)
#+end_src

** Refiling

Create new parent nodes when refiling by adding /New Heading in the prompt:

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  )
#+end_src

I need to learn how to refile better.

#+begin_src emacs-lisp :tangle no
;; org-refile:
;; (setq org-refile-targets (quote (("projects.org" :maxlevel . 5)
;;                                  ("archived_projects.org" :maxlevel . 5))))
;; (setq org-outline-path-complete-in-steps nil         ; Refile in a single go
;;       org-refile-use-outline-path t)                  ; Show full paths for refiling
#+end_src

** Agenda

Basic config:

#+begin_src emacs-lisp :tangle yes
(use-package! org-agenda
  :init
  (map! "<f1>"'(lambda (&optional arg) (interactive) (org-agenda arg " ")))
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator nil
        org-log-repeat nil ; don't log state changes
        ; show clocked items in the agenda:
        ; org-agenda-start-with-log-mode t
        )
  ;; :config
  ;; (setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
  )
#+end_src

Show birthdays:

#+begin_src emacs-lisp :tangle yes
(use-package! org-contacts
  :after org
  :init
  (setq org-contacts-birthday-property "BIRTHDAY")
  (setq org-contacts-files '("~/org/contacts.org"))
  )
#+end_src

My custom agenda views:

#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :after org-agenda
  :init
  ;; don't break evil on org-super-agenda headings, see https://github.com/alphapapa/org-super-agenda/issues/50
  (setq org-super-agenda-header-map (make-sparse-keymap))

  ;; (setq org-agenda-span 1; show only current day
  ;;       org-agenda-start-day nil
  ;;       )
  (setq org-agenda-custom-commands
        '((" " "Today"
           ((agenda "" ((org-agenda-span 1)
                        (org-agenda-start-day nil)
                        (org-agenda-overriding-header "Day Agenda\n")
                        (org-super-agenda-groups
                         '((:name "" :time-grid t :date today :order 1)
                           (:name "Deadlines" :deadline t :order 2)
                            ;; catch "Other Items", e.g. scheduled yesterday:
                           (:name " " :date t :order 2)
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:name "Routines" :tag "routine")
                            (:name "Today's Tasks" :priority "A")
                            (:name "More Tasks" :priority "B")
                            (:name "Even More Tasks" :priority "C")
                            (:name "To refile" :file-path "inbox.org")
                            ;; (:name "Active projects"
                            ;;        :file-path "journal/")
                            ;; (:name "Deadlines"
                            ;;        :deadline t
                            ;;        :order 2)
                            ;; (:name "Future Schedule"
                            ;;        :scheduled future
                            ;;        :order 8)
                            ;; (:name "Projects"
                            ;;        :tag "project"
                            ;;        :order 5)
                            (:discard (:anything t))))))))
                            ;; (:discard (:not (:todo "TODO")))))))))
            ))

  (custom-set-faces!
    '(org-agenda-day :foreground "#ff0000"))

  :config
  (org-super-agenda-mode)
  )
#+end_src

** Calendar

#+begin_src emacs-lisp :tangle yes
(use-package! calfw
  :after org
  :init
  (map! "<f2>"'(lambda (&optional arg) (interactive) (cfw:open-org-calendar)))
  (setq cfw:render-line-breaker 'cfw:render-line-breaker-wordwrap) ; doesn't seem to work
  (setq calendar-week-start-day 1)
  )
#+end_src

Display UK bank holidays only (from https://emacs.stackexchange.com/questions/44851/uk-holidays-definitions):

#+begin_src emacs-lisp :tangle yes
(setq calendar-holidays
      '((holiday-fixed 1 1 "New Year's Day")
        (holiday-new-year-bank-holiday)
        (holiday-fixed 2 14 "Valentine's Day")
        (holiday-fixed 3 17 "St. Patrick's Day")
        (holiday-fixed 4 1 "April Fools' Day")
        (holiday-easter-etc -47 "Shrove Tuesday")
        (holiday-easter-etc -21 "Mother's Day")
        (holiday-easter-etc -2 "Good Friday")
        (holiday-easter-etc 0 "Easter Sunday")
        (holiday-easter-etc 1 "Easter Monday")
        (holiday-float 5 1 1 "Early May Bank Holiday")
        (holiday-float 5 1 -1 "Spring Bank Holiday")
        (holiday-float 6 0 3 "Father's Day")
        (holiday-float 8 1 -1 "Summer Bank Holiday")
        (holiday-fixed 10 31 "Halloween")
        (holiday-fixed 12 24 "Christmas Eve")
        (holiday-fixed 12 25 "Christmas Day")
        (holiday-fixed 12 26 "Boxing Day")
        (holiday-christmas-bank-holidays)
        (holiday-fixed 12 31 "New Year's Eve")))
;; N.B. It is assumed that 1 January is defined with holiday-fixed -
;; this function only returns any extra bank holiday that is allocated
;; (if any) to compensate for New Year's Day falling on a weekend.
;;
;; Where 1 January falls on a weekend, the following Monday is a bank
;; holiday.
(defun holiday-new-year-bank-holiday ()
  (let ((m displayed-month)
        (y displayed-year))
    (calendar-increment-month m y 1)
    (when (<= m 3)
      (let ((d (calendar-day-of-week (list 1 1 y))))
        (cond ((= d 6)
                (list (list (list 1 3 y)
                            "New Year's Day Bank Holiday")))
              ((= d 0)
                (list (list (list 1 2 y)
                            "New Year's Day Bank Holiday"))))))))

;; N.B. It is assumed that 25th and 26th are defined with holiday-fixed -
;; this function only returns any extra bank holiday(s) that are
;; allocated (if any) to compensate for Christmas Day and/or Boxing Day
;; falling on a weekend.
(defun holiday-christmas-bank-holidays ()
  (let ((m displayed-month)
        (y displayed-year))
    (calendar-increment-month m y -1)
    (when (>= m 10)
      (let ((d (calendar-day-of-week (list 12 25 y))))
        (cond ((= d 5)
                (list (list (list 12 28 y)
                            "Boxing Day Bank Holiday")))
              ((= d 6)
                (list (list (list 12 27 y)
                            "Boxing Day Bank Holiday")
                      (list (list 12 28 y)
                            "Christmas Day Bank Holiday")))
              ((= d 0)
                (list (list (list 12 27 y)
                            "Christmas Day Bank Holiday"))))))))

#+end_src


* Org capture

I use org-capture all the time:

#+begin_src emacs-lisp :tangle yes
(map!
 :leader
 :desc "org-capture" "x" #'org-capture
 )
#+end_src

** Capture templates

#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (setq org-capture-templates '(
          ("t" "task (todo.org)" entry (file+headline "todo.org" "Single Tasks")
           "* TODO %?")
          ("s" "scheduled task (todo.org)" entry (file+headline "todo.org" "Single Tasks")
           "* TODO %?\nSCHEDULED: %^t\n")
          ("b" "buy (add to shopping list in todo.org)" entry (file+headline "todo.org" "Shopping list")
           "* TODO buy %?")
          ("a" "appointment (schedule.org)" entry (file+headline "schedule.org" "Calendar")
           "* %?\n%^t")
          ("i" "inbox entry" entry (file "inbox.org")
           "* %?")
          ("j" "journal/logbook entry (logbook.org)" entry (file+datetree "logbook.org")
            "* %<%H:%M>\n%?\n" :tree-type week)
          ;; '("j" "Journal entry" entry (function org-journal-find-location)
          ;;   "* %(format-time-string org-journal-time-format)%\n%i%?")
          ; from browser:
          ("l" "link (from browser)" entry (file "inbox.org")
           ;; "* TODO %a\n %?\n %i" :immediate-finish t))
           "* TODO %a\n %?\n %i")
          )
  )
  (setq org-protocol-default-template-key "l")
  )
#+end_src


* Writing with org

** Writeroom mode

Distraction-free prose writing. This comes from the :ui zen module.

#+begin_src emacs-lisp :tangle yes
(setq +zen-text-scale 0.9
      writeroom-extra-line-spacing 0.3
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 18)
      writeroom-fullscreen-effect t
 )
#+end_src

** General org tweaks

Show only headings on opening:

#+begin_src emacs-lisp :tangle yes
(setq org-startup-folded 'content)
#+end_src

I like automatic line breaks when I write prose:

#+begin_src emacs-lisp :tangle yes
(after! org
  (add-hook 'org-mode-hook #'auto-fill-mode)
)
#+end_src

Prevent editing hidden text:

#+begin_src emacs-lisp :tangle yes
(setq org-catch-invisible-edits 'error)
#+end_src

Partially fix M-RET and C-RET behaviour that's broken in doom:

#+begin_src emacs-lisp :tangle yes
(setq org-insert-heading-respect-content nil)
#+end_src

** Make org files prettier

Hide slashes and stars:

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-hide-emphasis-markers t)
  )
#+end_src

Rendering of italics is currently broken, so let's give them colour:

#+begin_src emacs-lisp :tangle yes
(after! org
  (add-to-list 'org-emphasis-alist '("/" (italic :foreground "#dddd99")))
  )
#+end_src

Display LaTeX symbols as UTF characters:

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-pretty-entities t)
  )
#+end_src

Properly display sub- and superscripts:

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-pretty-entities-include-sub-superscripts t)
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
;; (add-hook! 'org-mode-hook #'+org-pretty-mode
#+end_src

# Nicer typography with typo-mode:

# #+begin_src emacs-lisp :tangle yes
# (typo-global-mode 1)
# (add-hook 'org-mode-hook 'typo-mode)
# #+end_src

** Custom mapping from LaTeX code to UTF8 characters

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-entities-user '(
                            ("bot" "\\bot" nil "" "" "" "⊥")
                            ("top" "\⊤" nil "" "" "" "⊤")
                            ("box" "$\\box$" nil "" "" "" "□")
                            ("diamond" "$\\diamond$" nil "" "" "" "◇")
                            ("Box" "$\\Box$" nil "" "" "" "□")
                            ("Diamond" "$\Diamond$" nil "" "" "" "◇")
                            ("models" "$\\models$" nil "" "" "" "⊨")
                            ("vdash" "$\\vdash$" nil "" "" "" "⊢")
                            ("llb" "$\\llbracket$" nil "" "" "" "⟦")
                            ("rrb" "$\\rrbracket$" nil "" "" "" "⟧")
                           )   
        )
  )
#+end_src

** LaTeX preview

LaTeX preview in org, mostly adapted from [[https://tecosaur.github.io/emacs-config/config.html][tecosaur]].

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-preview-latex-image-directory "~/.org/ltxpng/")
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (setq org-highlight-latex-and-related '(native script entities))
)
#+end_src

Customize rendering of LaTeX fragments:

#+begin_src emacs-lisp :tangle yes
(setq org-format-latex-header "\\documentclass{article}
\\usepackage[usenames]{color}

\\usepackage[T1]{fontenc}
\\usepackage{mathtools}
%\\usepackage{stmaryrd}
\\usepackage{textcomp,txfonts,latexsym,amssymb}
\\usepackage[makeroom]{cancel}
\\usepackage{qtree}
\\usepackage{booktabs}
\\newcommand{\\sem}[2][]{\\mbox{$[\\![ \#2 ]\\!]^{\#1}$}}

\\pagestyle{empty}
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
\\usepackage{arev}
\\usepackage{arevmath}")
#+end_src

Make background transparent:

#+begin_src emacs-lisp :tangle yes
(after! org
;; (let ((dvipng--plist (alist-get 'dvipng org-preview-latex-process-alist)))
;;   (plist-put dvipng--plist :use-xcolor t)
;;   (plist-put dvipng--plist :image-converter '("dvipng -D %D -bg 'transparent' -T tight -o %O %f")))
  (add-hook! 'doom-load-theme-hook
    (defun +org-refresh-latex-background ()
      (plist-put! org-format-latex-options
                  :scale 1.0
                  :background
                  (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                      'default)
                                  :background nil t))))
  )
#+end_src

** Citations

#+begin_src emacs-lisp :tangle yes
(use-package! org-ref
  :config
  (setq
   org-ref-default-bibliography '("/home/wo/notes/literature.bib")
   org-ref-pdf-directory  "/home/wo/papers/[A-Z]/"
   ;; org-ref-notes-directory "~/notes/literature"
   ;; org-ref-notes-function 'orb-edit-notes
   org-ref-show-broken-links nil ;; speed up agenda generation
   ;; bugfix: allow opening pdf at point
   org-ref-get-pdf-filename-function (lambda (key) (car (bibtex-completion-find-pdf key)))
   org-ref-completion-library 'org-ref-ivy-cite
  )
)
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! org-ref
  (use-package! ivy-bibtex
    :config
    (setq
     bibtex-completion-bibliography "~/notes/literature.bib"
     bibtex-completion-library-path "~/papers/[A-Z]/"
     bibtex-completion-notes-path "~/notes/literature/"
     bibtex-completion-pdf-field "file"
     bibtex-completion-pdf-symbol "⌘"
     bibtex-completion-notes-symbol "✎"
     )
  )
)
#+end_src

#+begin_src emacs-lisp :tangle yes
(org-link-set-parameters
 "cite"
 :display 'org-link)
#+end_src

I don't want to enter normal mode just to insert a reference:

#+begin_src emacs-lisp :tangle yes
(map!
 :desc "insert citation" "C-c c" #'org-ref-insert-link
 )
#+end_src

Call ivy-bibtex with SPC n p:

#+begin_src emacs-lisp :tangle yes
(map!
 :leader
 :desc "open bibliography database (ivy-bibtex)" "n p" #'ivy-bibtex
 )
#+end_src

** Zettel (org-roam)

*** Basic config

#+begin_src emacs-lisp :tangle yes
(setq org-roam-v2-ack t)
(setq org-roam-directory (file-truename "/home/wo/notes/"))
(after! org-roam
  (add-hook 'after-init-hook 'org-roam-mode)
)
(use-package! org-roam-bibtex
  :after org-roam
  :load-path "~/notes/literature.bib"
  :hook (org-roam-mode . org-roam-bibtex-mode)
)
#+end_src

*** Note templates

#+begin_src emacs-lisp :tangle yes
(after! org-roam

  (setq orb-preformat-keywords
        '("citekey" "title" "year" "author-or-editor" "file")
        orb-process-file-keyword t
        orb-file-field-extensions '("pdf"))
                        
  (setq org-roam-capture-templates
        (list
         '("n" "default note" plain "%?"
           :if-new (file+head "%<%Y%m%d>-${slug}.org"
                    "#+TITLE: ${title}\n\n")
           :unnarrowed t)
         '("b" "blog post" plain "%?"
           :if-new (file+head "blog/%<%Y%m%d>-${slug}.org"
                    "#+TITLE: ${title}\n\n")
           :unnarrowed t)
         '("l" "literature note" plain "%?"
          :if-new (file+head "literature/${citekey}.org"
                             "#+TITLE: ${author-or-editor} ${year} ${title}\n")
        ))
  )
)
#+end_src

*** Key bindings

#+begin_src emacs-lisp :tangle yes
(after! org-roam
  (map! :leader
        :prefix "n"
        :desc "org-roam-buffer-toggle" "r" #'org-roam-buffer-toggle
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-node-find" "f" #'org-roam-node-find
        :desc "org-roam-show-graph" "g" #'org-roam-show-graph
        :desc "org-roam-capture" "c" #'org-roam-capture
        )
  )
#+end_src

I don't want to enter normal mode just to insert a link to another note:

#+begin_src emacs-lisp :tangle yes
(after! org-roam
  (map!
   :desc "insert link to node" "C-c i" #'org-roam-node-insert
   )
)
#+end_src

*** Tags

Emulate subdirectories-as-tags behaviour from v1:

#+begin_src emacs-lisp :tangle yes
(cl-defmethod org-roam-node-directories ((node org-roam-node))
  (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (format "(%s)" (string-join (f-split dirs) "/"))
    ""))

(setq org-roam-node-display-template "${directories:10} ${title:*} ${tags:10}")
#+end_src

Key bindings for adding and removing tags:

#+begin_src emacs-lisp :tangle yes
(map!
 :leader
 :prefix "n"
 :desc "add org-roam tag" "t" #'+org-roam-tag-add
 :desc "remove org-roam tag" "T" #'+org-roam-tag-remove
)
#+end_src

*** Deft

For searching through notes.

#+begin_src emacs-lisp :tangle yes
(setq deft-directory org-roam-directory
      deft-use-filter-string-for-filename t
      deft-default-extension "org"
      deft-recursive t)
#+end_src

Make summaries readable (https://github.com/jrblevin/deft/issues/75):

#+begin_src emacs-lisp :tangle yes
(setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
(setq deft-use-filename-as-title 't)
#+end_src

fix keybindings in deft window (https://github.com/hlissner/doom-emacs/issues/2991):

#+begin_src emacs-lisp :tangle yes
(map! :map deft-mode-map
        :n "gr"  #'deft-refresh
        :n "r"   #'deft-rename-file
        :n "a"   #'deft-new-file
        :n "A"   #'deft-new-file-named
        :n "d"   #'deft-delete-file
        :n "D"   #'deft-archive-file
        :n "q"   #'kill-current-buffer)
#+end_src

*** Hide property drawers

#+begin_src emacs-lisp :tangle yes
(defun org-hide-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))

(defun org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (interactive)
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))

(defun org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (org-show-properties)
    (org-hide-properties)))
#+end_src

*** Convert LaTeX notes to org

This function replaces the content of the current buffer

#+begin_src emacs-lisp :tangle yes
(defun my-run-tex2org ()
  (interactive)
  (shell-command-on-region
   ; mark whole buffer:
   (point-min)
   (point-max)
   ; the command:
   "python3 /home/wo/notes/tex2org.py"
   ; output:
   (current-buffer)
   ; replace:
   t
   ; name of error buffer:
   "*tex2org Error Buffer*"
   ; show error buffer:
   t))
#+end_src

*** Convert blog posts to HTML and submit to server

#+begin_src emacs-lisp :tangle yes
(defun my-run-post_to_server ()
  (interactive)
  (save-buffenr)
  (shell-command
   (format "python3 /home/wo/notes/blog/post_to_server.py %s"
           (shell-quote-argument (buffer-file-name))))
  (revert-buffer t t t)
)
#+end_src

** Spell-checking 

Why is it so hard to set up spell-checking with multiple dictionaries?

#+begin_src emacs-lisp :tangle yes
(setq ispell-local-dictionary "en_GB")
(setq ispell-program-name "hunspell")
(setq ispell-hunspell-dictionary-alist '(("de_DE"
                                            "[[:alpha:]]"
                                            "[^[:alpha:]]"
                                            "['.ß-]" 'many-otherchars
                                            ("-r" "-d" "de_DE") nil utf-8)
                                           ("en_GB"
                                            "[[:alpha:]]"
                                            "[^[:alpha:]]"
                                            "[']" nil
                                            ("-r" "-d" "en_GB") nil utf-8)))
;; (when (boundp 'ispell-hunspell-dictionary-alist)
;;   (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))
;; For saving words to the personal dictionary, don't infer it from
;; the locale, otherwise it would save to ~/.hunspell_en_GB.
(setq ispell-personal-dictionary "~/.hunspell_personal")
;; The personal dictionary file has to exist, otherwise hunspell will
;; silently not use it.
#+end_src

The guess-language package guesses which spellchecker to use, but I can’t get it
to work properly.

#+begin_src emacs-lisp :tangle yes
;; (setq guess-language-langcodes
;;   '((en . ("en_GB" "English"))
;;     (de . ("de_DE" "German"))))
;; (setq guess-language-languages '(en de))
;; (add-hook 'org-mode-hook (lambda () (guess-language-mode 1)))
#+end_src

So I’m switching manually:

#+begin_src emacs-lisp :tangle yes
(defun fd-switch-dictionary()
(interactive)
(let* ((dic ispell-current-dictionary)
    (change (if (string= dic "deutsch8") "english" "deutsch8")))
(ispell-change-dictionary change)
(message "Dictionary switched from %s to %s" dic change)
))

(global-set-key (kbd "<f9>")   'fd-switch-dictionary)
#+end_src

** Turn off smartparens

#+begin_src emacs-lisp :tangle yes
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src


* BibTeX

#+begin_src emacs-lisp :tangle yes
(setq reftex-default-bibliography '("/home/wo/notes/literature.bib"))
#+end_src

Entry format in bibtex files:

#+begin_src emacs-lisp :tangle yes
(setq bibtex-align-at-equal-sign t ; fields aligned at equal sign
      bibtex-autokey-name-year-separator ""
      bibtex-autokey-year-title-separator ""
      bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
      bibtex-autokey-year-length 2
      bibtex-autokey-titlewords 1
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 20
      ; additional default fields:
      ;bibtex-user-optional-fields '("summary", "comments")
      ; reformat/realign entry on C-c C-c:
      bibtex-entry-format t
      )
#+end_src


* LaTeX


* Programming

** Python

#+begin_src emacs-lisp :tangle yes
(setq python-fill-docstring-style 'symmetric)
(setq python-shell-interpreter "python3")
#+end_src


* Anki Editor

I've gone back to creating cards directly in Anki.

#+begin_src emacs-lisp :tangle no

;; (use-package anki-editor
;;   :commands (anki-editor-mode)
;; )

;; (map! :localleader
;;       :map org-mode-map
;;       (:prefix ("k" . "Anki")
;;         :desc "Insert a note interactively" "k" 'anki-editor-insert-note
;;         :desc "Push notes to Anki" "p" 'anki-editor-push-notes
;;         :desc "Retry pushing notes to Anki" "r" 'anki-editor-retry-failure-notes
;;         :desc "Cloze region" "c" 'anki-editor-cloze-region
;;         )
;;       )

;; (add-hook! org-mode
;;   (anki-editor-mode))

;; (setq org-my-anki-file "/home/wo/.org/anki.org")
;; (after! org-capture
;;   (add-to-list 'org-capture-templates
;;                '("a" "Anki basic" entry
;;                 (file+headline org-my-anki-file "Anki Dispatch")
;;                 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Default\n:END:\n** Front\n%?\n** Back\n%x\n"))
;;   (add-to-list 'org-capture-templates
;;                '("A" "Anki cloze"
;;                 entry
;;                 (file+headline org-my-anki-file "Anki Dispatch")
;;                 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Default\n:END:\n** Text\n%x\n** Extra\n"))
;;   )

#+end_src


* Email

I sometimes play around with mu4e, but haven't switched completely.

#+begin_src emacs-lisp :tangle yes
(set-email-account! "UoE"
  '((mu4e-sent-folder       . "/UoE/Sent Mail")
    (mu4e-drafts-folder     . "/UoE/Drafts")
    (mu4e-trash-folder      . "/UoE/Trash")
    (mu4e-refile-folder     . "/UoE/All Mail")
    (smtpmail-smtp-user     . "wschwarz@ed.ac.uk")
    (user-mail-address      . "wschwarz@ed.ac.uk")
    (mu4e-compose-signature . "\nBest,\nWolfgang"))
  t)
#+end_src

The paths here are relative to ~/.mail.


* Misc smaller settings

Rename current file and buffer (from
https://stackoverflow.com/questions/12634850/how-to-rename-a-file-by-editing-its-current-name):

#+begin_src emacs-lisp :tangle yes
(defun rename-file-and-buffer ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (cond ((get-buffer new-name)
               (message "A buffer named '%s' already exists!" new-name))
              (t
               (rename-file name new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil)))))))
#+end_src

Delete files to trash:

#+begin_src emacs-lisp :tangle yes
(setq-default delete-by-moving-to-trash t)
#+end_src

Raise undo-limit and allow fine-grained undo:

#+begin_src emacs-lisp :tangle yes
(setq undo-limit 80000000
      evil-want-fine-undo t)
#+end_src

Make Y yank the whole line:

#+begin_src emacs-lisp :tangle yes
(evil-put-command-property 'evil-yank-line :motion 'evil-line)
#+end_src

Fix copy and paste to terminal:

#+begin_src emacs-lisp :tangle yes
(setq x-select-enable-clipboard t)
#+end_src

Auto-save buffers, backups in ~/.emacsbup/

#+begin_src emacs-lisp :tangle yes
(auto-save-visited-mode 1)

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist '(("." . "~/.emacsbup"))
      delete-old-versions t
      make-backup-files t
      vc-make-backup-files t ; backup files even if version controlled
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups

(setq auto-save-file-name-transforms
  `((".*" "~/.emacsbup/" t)))
#+end_src

Allow moving past end of line (doesn't work):

#+begin_src emacs-lisp :tangle yes
;; (setq evil-move-beyond-eol t)
#+end_src

